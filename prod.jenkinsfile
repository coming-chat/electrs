pipeline {
  agent {
    node {
      label 'arm64'
    }
  }
  environment {
    DOCKER_CREDENTIAL_ID = 'dockerhub-id'
    KUBECONFIG_CREDENTIAL_ID = 'admin'
    REGISTRY = 'docker.io'
    DOCKERHUB_NAMESPACE = 'comingweb3'
    TAG_NAME = sh (returnStdout: true, script: "echo $BRANCH_NAME | sed 's@/@-@g'").trim()
    APP_NAME = 'electrs'
    APP_NAME_SIGNET = 'electrs-signet'
    APP_NAME_TESTNET = 'electrs-testnet'
    APP_NAME_MAINNET = 'electrs-mainnet'
    NAME_SPACE = 'backend-prod'
    REPLICAS = 1
    HOST_NAME = 'electrs.coming.chat'
  }


  stages {

    stage('拉取代码') {
      steps {
        git(branch: 'main', url: 'https://github.com/coming-chat/electrs.git', credentialsId: 'github-id', changelog: true, poll: false)
      }
    }


    stage('推送镜像') {
      steps {
        container('base') {
          withCredentials([usernamePassword(credentialsId : "$DOCKER_CREDENTIAL_ID" ,passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,)]) {
            sh 'docker buildx ls'
            sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
            sh 'docker buildx build --platform=linux/amd64,linux/arm64 --network host -f Dockerfile -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:$TAG_NAME-$BUILD_NUMBER .'
            sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:$TAG_NAME-$BUILD_NUMBER'
          }

        }

      }
    }

    stage('部署') {
      steps {
        container('base') {
          script {
            withCredentials([
              kubeconfigFile(
                credentialsId: 'admin',
                variable: 'KUBECONFIG')
              ])
              {
                //sh 'envsubst <  deploy/deploy-electrs-mainnet.yaml | kubectl apply -f -'
                //sh 'envsubst <  deploy/deploy-electrs-signet.yaml | kubectl apply -f -'
                sh 'envsubst <  deploy/deploy-electrs-testnet.yaml | kubectl apply -f -'
                sh 'envsubst <  deploy/ingress.yaml | kubectl apply -f -'
              }
            }

        }

      }

    }

  }
}